{
  "scopeName": "source.dm-script",
  "name": "DM Script",
  "patterns": [
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#classLike" },
    { "include": "#declarations" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#functions" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#variables" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash.dm", "match": "//.*$" },
        { "name": "comment.block.dm", "begin": "/\\*", "end": "\\*/" }
      ]
    },

  "strings": {
    "patterns": [
      {
        "name": "string.quoted.double.dm",
        "begin": "\"",
        "end": "(?<!\\\\)\"",
        "patterns": [
          {
            "name": "constant.character.escape.dm",
            "match": "\\\\(?:[abfnrtv0\"'\\\\\\?]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}|[0-7]{1,3})"
          },
          {
            "name": "invalid.illegal.escape.dm",
            "match": "\\\\."
          }
        ]
      },
      {
        "name": "string.quoted.single.dm",
        "begin": "'",
        "end": "(?<!\\\\)'",
        "patterns": [
          {
            "name": "constant.character.escape.dm",
            "match": "\\\\(?:[abfnrtv0\"'\\\\\\?]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}|[0-7]{1,3})"
          },
          {
            "name": "invalid.illegal.escape.dm",
            "match": "\\\\."
          }
        ]
      }
    ]
  },
    "classLike": {
      "patterns": [
        {
          "name": "meta.class.dm",
          "begin": "(?i)\\b(class|interface)\\b\\s+([A-Za-z_]\\w*)",
          "beginCaptures": {
            "1": { "name": "storage.type.class.dm" },
            "2": { "name": "entity.name.type.class.dm" }
          },
          "end": "\\}",
          "endCaptures": { "0": { "name": "punctuation.section.class.end.dm" } },
          "patterns": [
            { "name": "punctuation.section.class.begin.dm", "match": "\\{" },
            { "include": "#strings" },
            { "include": "#comments" },
            { "include": "#declarations" },
            { "include": "#keywords" },
            { "include": "#types" },
            { "include": "#functions" },
            { "include": "#numbers" },
            { "include": "#operators" },
            { "include": "#variables" },
            { "include": "#punctuation" }
          ]
        }
      ]
    },
"declarations": {
  "patterns": [
    {
      "name": "meta.var.declaration.dm",
      "begin": "(?i)\\b((?:void|string|bool|interface|image|taggroup|object|class|def|number|uiframe|async))\\b",
      "beginCaptures": { "1": { "name": "storage.type.dm" } },
      "end": "(?=;|$)",
      "patterns": [
        { "include": "#strings" },
        { "include": "#comments" },
        { "name": "punctuation.separator.comma.dm", "match": "," },
        { "include": "#functions" }, 
        { "name": "variable.other.declaration.dm",
          "match": "\\b[A-Za-z_]\\w*\\b(?!\\s*\\()"
        },
        { "include": "#operators" },
        { "include": "#numbers" },
        { "include": "#punctuation" }
      ]
    }
  ]
},
    "keywords": {
      "patterns": [
        { "name": "keyword.control.dm", "match": "(?i)\\b(?:if|while|for|elif|return|else)\\b" }
      ]
    },
    "types": {
      "patterns": [
        { "name": "storage.type.dm", "match": "(?i)\\b(?:void|string|bool|interface|image|taggroup|object|class|def|number)\\b" }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.dm",
          "match": "(?i)\\b(?!if\\b|while\\b|for\\b|elif\\b|return\\b|else\\b|class\\b|interface\\b)([A-Za-z_]\\w*)\\b(?=\\s*\\()",
          "captures": { "1": { "name": "entity.name.function.dm" } }
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.dm", "match": "\\b(?:0[xX][0-9A-Fa-f]+|0[bB][01]+|0[oO][0-7]+|\\d+\\.\\d*(?:[eE][+-]?\\d+)?|\\.\\d+(?:[eE][+-]?\\d+)?|\\d+(?:[eE][+-]?\\d+)?)\\b" }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.dm",
          "match": "(?:\\+\\+|--|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|:=|==|!=|<=|>=|<<|>>|&&|\\|\\||=|<|>|!|~|\\+|-|\\*\\*|\\*|/(?!/|\\*)|%|\\?|:|->)"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.dm",
          "match": "(?i)\\b(?!if\\b|while\\b|for\\b|elif\\b|return\\b|else\\b|class\\b|interface\\b|void\\b|string\\b|bool\\b|image\\b|taggroup\\b|object\\b|def\\b|number\\b)([A-Za-z_]\\w*)\\b(?!\\s*\\()",
          "captures": { "1": { "name": "variable.other.dm" } }
        }
      ]
    },
    "punctuation": {
      "patterns": [
        { "name": "punctuation.section.block.begin.dm", "match": "\\{" },
        { "name": "punctuation.section.block.end.dm", "match": "\\}" },
        { "name": "punctuation.definition.parameters.begin.dm", "match": "\\(" },
        { "name": "punctuation.definition.parameters.end.dm", "match": "\\)" },
        { "name": "punctuation.separator.comma.dm", "match": "," },
        { "name": "punctuation.terminator.statement.dm", "match": ";" },
        { "name": "punctuation.accessor.dot.dm", "match": "\\." },
        { "name": "punctuation.accessor.double-colon.dm", "match": "::" }
      ]
    }
  }
}
